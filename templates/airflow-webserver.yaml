apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-webserver
  labels:
    app: airflow-webserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-webserver
  template:
    metadata:
      labels:
        app: airflow-webserver
    spec:
      containers:
        - name: webserver
          image: airflow:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: webserver
              containerPort: 8080
          args: ["webserver"]
          env:
            - name: AIRFLOW__KUBERNETES__NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace

            - name: SQL_ALCHEMY_CONN
              valueFrom:
                secretKeyRef:
                  name: airflow-secrets
                  key: sql_alchemy_conn

          volumeMounts:
            - name: airflow-configmap
              mountPath: /root/airflow/airflow.cfg
              subPath: airflow.cfg

            - name: airflow-dags
              mountPath: /root/airflow/dags

            - name: airflow-logs
              mountPath: /root/airflow/logs

            - name: airflow-plugins
              mountPath: /root/airflow/plugins

      volumes:
        - name: airflow-configmap
          configMap:
            name: airflow-configmap

        - name: airflow-logs
          hostPath:
            path: { { LOGS_VOLUMES } }

        - name: airflow-dags
          hostPath:
            path: { { DAGS_VOLUMES } }

        - name: airflow-plugins
          hostPath:
            path: { { PLUGINS_VOLUMES } }


---
kind: Service
apiVersion: v1
metadata:
  name: airflow-webserver-service
spec:
  type: LoadBalancer
  # type: NodePort # IF MINIKUBE DRIVER IS DOCKER
  selector:
    app: airflow-webserver
  ports:
    - port: 8080
      # nodePort: 30000 # IF MINIKUBE DRIVER IS DOCKER -> mapped to minikube-ip : this node port